

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Address {
address_id String @id @default(ulid())
street_address String
city String
state String
postal_code Int
latitude Float
longitude Float

//relation
user User @relation(fields: [user_id], references: [user_id])
user_id String @unique
}


model User{
user_id String @id @default(ulid())
email String @unique
password String
fullName String
address   Address?
phone String
role UserRole @default(USER)
is_verified Boolean @default(false)
status USER_STATUS @default(ACTIVE)
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt

service_provider Service_Provider?
Admin Admin?

@@map("users")
}

model Admin{
  id String @id @default(ulid())
  email String @unique
  fullName String
  is_deleted Boolean @default(false)
  createdAt DateTime @default(now())
  updated DateTime @updatedAt

  user User @relation(fields: [email], references: [email])
  @@map("admins")
}

model Service_Provider{
  id String @id @default(ulid())
  email String @unique
  fullName String
  business_name String
  business_license Int
  nid_number Int
  govt_id_or_tin Int
  facebook_profile String
  website_link String
  area_name String
  postal_code Int
  category String
  status Provider_Status @default(PENDING)
  is_apporved Boolean @default(false)
  submitted_at DateTime @default(now())

  //relation
  user User @relation(fields: [email], references: [email])
  providerServices ProviderServices[]
  @@map("service_provider")
}
model Service{
  id String @id @default(ulid())
  title String
  description String
  base_price Float
  price_unit String
  estimed_duration String
  is_featured Boolean
  avg_rating Float
  is_active Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  providerServices ProviderServices[]
  category Service_Category[]
  @@map("services")
}

model ProviderServices{
  providerId String
  service_provider Service_Provider @relation(fields: [providerId], references: [id])

  serviceId String
  service Service @relation(fields: [serviceId], references: [id])

  @@id([providerId, serviceId])

  @@map("providerServices")
}

model Service_Category{
  id String @id @default(ulid())
  name String
  icon String
  description String
  is_Active Boolean
  //relation
  parent_categoryId String
  parent_category Parent_category @relation(fields: [parent_categoryId], references: [id])

  service_id String
  service Service @relation(fields: [service_id], references: [id])
 
 @@map("service_category")
}

model Parent_category{
  id String @id @default(ulid())
  name String
  icon String
  description String
  is_Active Boolean
  category Service_Category[]
  @@map("parent_category")
}

enum UserRole{
  SUPER_ADMIN
  ADMIN
  USER
  SERVICE_PROVIDER
}
enum USER_STATUS{
  ACTIVE
  BLOCKED
  DELETED
}

enum Provider_Status{
  PENDING
  ACTIVE
}